#include "../includes.h"

namespace display {

static const uint8_t PROGMEM g_glyphs[] =
{
    // 0 (+0)
    0x00, 0x00, 0xF8, 0x0F, 0xFC, 0x1F, 0x0E, 0x38, 0x06, 0x30,
    0x06, 0x30, 0x0E, 0x38, 0xFC, 0x1F, 0xF8, 0x0F, 0x00, 0x00,

    // 1 (+20)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x30, 0xFE, 0x3F,
    0xFE, 0x3F, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // 2 (+40)
    0x00, 0x00, 0x18, 0x3C, 0x1C, 0x3E, 0x0E, 0x37, 0x06, 0x33,
    0x86, 0x31, 0xCE, 0x31, 0xFC, 0x38, 0x78, 0x38, 0x00, 0x00,

    // 3 (+60)
    0x00, 0x00, 0x18, 0x0C, 0x1C, 0x1C, 0x0E, 0x38, 0x86, 0x30,
    0xC6, 0x30, 0xEE, 0x39, 0xFC, 0x1F, 0x38, 0x0F, 0x00, 0x00,

    // 4 (+80)
    0x00, 0x00, 0x00, 0x07, 0xC0, 0x07, 0xF0, 0x06, 0x3C, 0x06,
    0x0E, 0x06, 0xFE, 0x3F, 0xFE, 0x3F, 0x00, 0x06, 0x00, 0x00,

    // 5 (+100)
    0x00, 0x00, 0x7E, 0x18, 0xFE, 0x38, 0xC6, 0x30, 0xC6, 0x30,
    0xC6, 0x30, 0xC6, 0x31, 0x86, 0x1F, 0x04, 0x0F, 0x00, 0x00,

    // 6 (+120)
    0x00, 0x00, 0xF8, 0x0F, 0xFC, 0x1F, 0xCE, 0x38, 0xC6, 0x30,
    0xC6, 0x30, 0xCE, 0x39, 0x9C, 0x1F, 0x18, 0x0F, 0x00, 0x00,

    // 7 (+140)
    0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x3C, 0x06, 0x3F,
    0xC6, 0x07, 0xF6, 0x01, 0x7E, 0x00, 0x1E, 0x00, 0x00, 0x00,

    // 8 (+160)
    0x00, 0x00, 0x38, 0x0E, 0x7C, 0x1F, 0xEE, 0x3B, 0xC6, 0x30,
    0x86, 0x31, 0xEE, 0x3B, 0x7C, 0x1F, 0x38, 0x0E, 0x00, 0x00,

    // 9 (+180)
    0x00, 0x00, 0x78, 0x08, 0xFC, 0x18, 0xCE, 0x39, 0x86, 0x31,
    0x86, 0x31, 0x8E, 0x31, 0xFC, 0x1F, 0xF8, 0x0F, 0x00, 0x00,

    // Upper (+200)
    // 0x00, 0x00, 0x06, 0x03, 0xC6, 0x03, 0xF6, 0x03, 0xFE, 0x3F,
    // 0xFE, 0x3F, 0xF6, 0x03, 0xC6, 0x03, 0x06, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x00, 0x18, 0x00, 0x1C, 0x00, 0x1E, 0x00,
    0x1E, 0x00, 0x1C, 0x00, 0x18, 0x00, 0x10, 0x00, 0x00, 0x00,

    // Lower (+220)
    // 0x00, 0x00, 0x60, 0x30, 0xE0, 0x31, 0xE0, 0x37, 0xFE, 0x3F,
    // 0xFE, 0x3F, 0xE0, 0x37, 0xE0, 0x31, 0x60, 0x30, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x1C, 0x00, 0x3C,
    0x00, 0x3C, 0x00, 0x1C, 0x00, 0x0C, 0x00, 0x04, 0x00, 0x00,

    // Dot (+240)
    0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00,

    // Degree (+248)
    0x00, 0x00, 0x3C, 0x00, 0x7E, 0x00, 0x66, 0x00, 0x66, 0x00,
    0x7E, 0x00, 0x3C, 0x00, 0x00, 0x00,

    // A (+264)
    0x00, 0x00, 0xF8, 0x3F, 0xFC, 0x3F, 0x0E, 0x03, 0x06, 0x03,
    0x06, 0x03, 0x0E, 0x03, 0xFC, 0x3F, 0xF8, 0x3F, 0x00, 0x00,

    // Space (+284)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // Star0 (+304)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // Star1 (+314)
    0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,

    // Star2 (+324)
    0x00, 0x00, 0x80, 0x00, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00,

    // Star3 (+334)
    0x00, 0x00, 0x80, 0x00, 0xE0, 0x03, 0x80, 0x00, 0x00, 0x00,

    // Star4 (+344)
    0x80, 0x00, 0xC0, 0x01, 0xF0, 0x07, 0xC0, 0x01, 0x80, 0x00,

    // Star5 (+354)
    0x80, 0x00, 0xE0, 0x03, 0xF8, 0x0F, 0xE0, 0x03, 0x80, 0x00,

    // (+364)
};

static const uint8_t* const PROGMEM g_glyphAddresses[] =
{
    g_glyphs + 0, g_glyphs + 20, g_glyphs + 40, g_glyphs + 60, g_glyphs + 80,
    g_glyphs + 100, g_glyphs + 120, g_glyphs + 140, g_glyphs + 160, g_glyphs + 180,
    g_glyphs + 200, g_glyphs + 220, g_glyphs + 240, g_glyphs + 248, g_glyphs + 264,
    g_glyphs + 284,
    g_glyphs + 304, g_glyphs + 314, g_glyphs + 324, g_glyphs + 334, g_glyphs + 344, g_glyphs + 354,
    g_glyphs + 364,
};

void Init()
{
    static const uint8_t PROGMEM initData[] =
    {
        i2c::address::SSD1306 << 1,     // 1306 I2C address, writing
        0x00,                           // Continuation = 0, d/c = 0
        0xD5, 0xF0,                     // Maximum clock frequency
        0x81, 0xFF,                     // Maximum contrast
        0x8D, 0x14,                     // Enable charge pump
        0xD9, 0xF2,                     // Set pre-charge period (discharge = 2, charge = 0xF)
        0xC8,                           // Scan direction from COM63 to COM0
        0xA1,                           // Columns remap (column #127 is mapped to SEG0)
        0xDA, 0x12,                     // Alternate COM configuration, disable COM left/right remap
        0x20, 0x01,                     // Vertical memory addressing mode
        0xAF,                           // Display on
    };
    i2c::Start();
    i2c::SendPM(initData, sizeof(initData));
    i2c::Stop();
}

void Clear()
{
    i2c::Start();
    i2c::Send2(i2c::address::SSD1306 << 1, 0x00);
    i2c::Send3(0x21, 0, 127);
    i2c::Send3(0x22, 0, 7);

    i2c::RepeatedStart();
    i2c::Send2(i2c::address::SSD1306 << 1, 0x40);
    for (uint16_t i = 0u; i < 1024; ++i)
        i2c::Send(0);

    i2c::Stop();
}

void DrawMainScreenBackground()
{
    // The display has the following layout:
    // ↑ x.xxA  y.yyA
    // ↓ z.zzA  nn.n°
    // \     /\     /
    //  \___/  \___/

    display::Clear();
    display::DrawGlyph(0, 0, display::SYM_UPPER);
    display::DrawGlyph(54, 0, display::SYM_A);
    display::DrawGlyph(0, 2, display::SYM_LOWER);
    display::DrawGlyph(54, 2, display::SYM_A);
    display::DrawGlyph(118, 0, display::SYM_A);
    display::DrawGlyph(120, 2, display::SYM_DEGREE);
}

uint8_t DrawGlyph(uint8_t x, uint8_t y, uint8_t glyph)
{
    if (glyph > COUNTOF(g_glyphAddresses) - 1)
        return x;

    uint8_t* glyphData = reinterpret_cast<uint8_t*>(pgm_read_word(&g_glyphAddresses[glyph]));
    uint8_t* nextGlyph = reinterpret_cast<uint8_t*>(pgm_read_word(&g_glyphAddresses[glyph + 1]));
    uint8_t width = static_cast<uint8_t>(nextGlyph - glyphData)/2;
    if (!width)
        return x;

    i2c::Start();
    i2c::Send2(i2c::address::SSD1306 << 1, 0x00);
    i2c::Send3(0x21, x, x + width - 1);
    i2c::Send3(0x22, y, y + 1);

    i2c::RepeatedStart();
    i2c::Send2(i2c::address::SSD1306 << 1, 0x40);

    while (glyphData < nextGlyph)
        i2c::Send(pgm_read_byte(glyphData++));

    i2c::Stop();

    return x + width;
}

uint8_t PrintString(uint8_t x, uint8_t y, uint8_t* buffer, uint8_t length)
{
    while (length--)
        x = DrawGlyph(x, y, *buffer++);

    return x;
}

uint8_t PrintCurrentX100(uint8_t x, uint8_t y, uint16_t current)
{
    utils::I16ToString(current, g_buffer, 2);
    g_buffer[0] = g_buffer[1];
    g_buffer[1] = g_buffer[2];
    g_buffer[2] = display::SYM_DOT;
    return PrintString(x, y, g_buffer, 5);
}

uint8_t PrintTemperatureX100(uint8_t x, uint8_t y, uint16_t temperature)
{
    utils::I16ToString(temperature, g_buffer, 2);
    g_buffer[4] = g_buffer[3];
    g_buffer[3] = display::SYM_DOT;
    return PrintString(x, y, g_buffer, 5);
}

} // namespace display
